From 0f68288ecb5ac1cdf89a6d7cd15004b36858173a Mon Sep 17 00:00:00 2001
From: Tonyeseh <esehtony123@gmail.com>
Date: Wed, 12 Jun 2024 12:28:29 +0100
Subject: [PATCH 1/2] getDataPoint, getRatio function implemented correctly

---
 client3.py | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..a366db4 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,15 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if price_b != 0:
+        return price_a / price_b
 
 
 # Main
@@ -52,8 +53,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
-- 
2.42.0.windows.2


From f7f63d5525751db76639e662076e1b5be8ad3971 Mon Sep 17 00:00:00 2001
From: Tonyeseh <esehtony123@gmail.com>
Date: Wed, 12 Jun 2024 12:28:52 +0100
Subject: [PATCH 2/2] test for client3.py updated

---
 client_test.py | 23 +++++++++++++++++++++--
 1 file changed, 21 insertions(+), 2 deletions(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..4279fd7 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,12 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+       stock, bid_price, ask_price, price = getDataPoint(quote)
+       self.assertAlmostEqual(bid_price, quote['top_bid']['price'])
+       self.assertAlmostEqual(ask_price, quote['top_ask']['price'])
+       self.assertEqual(stock, quote['stock'])
+       self.assertAlmostEqual(price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +21,23 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
+    for quote in quotes:
+       stock, bid_price, ask_price, price = getDataPoint(quote)
+       self.assertAlmostEqual(bid_price, quote['top_bid']['price'])
+       self.assertAlmostEqual(ask_price, quote['top_ask']['price'])
+       self.assertEqual(stock, quote['stock'])
+       self.assertAlmostEqual(price, (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio(self):
+     prices = [{'ABC': 117.38, 'DEF': 116.505, 'ratio': 1.0075104072786576}, {'ABC': 117.38, 'DEF': 116.325, 'ratio': 1.0090694175800559}]
+     for price in prices:
+        self.assertAlmostEqual(getRatio(price['ABC'], price['DEF']), price['ratio'])
 
+  def test_getRatio_calculateRatioPrice_bEqualZero(self):
+     prices = [{'ABC': 117.38, 'DEF': 0,}, {'ABC': 117.38, 'DEF': 0,}]
+     for price in prices:
+        self.assertAlmostEqual(getRatio(price['ABC'], price['DEF']), None)
 
 
 if __name__ == '__main__':
-- 
2.42.0.windows.2

